<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://geckoc.github.io/</id>
    <title>RichardTech</title>
    <updated>2021-01-07T01:26:20.082Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://geckoc.github.io/"/>
    <link rel="self" href="https://geckoc.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://geckoc.github.io/images/avatar.png</logo>
    <icon>https://geckoc.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, RichardTech</rights>
    <entry>
        <title type="html"><![CDATA[禁用或启动笔记本内置键盘]]></title>
        <id>https://geckoc.github.io/post/bi-ji-ben-nei-zhi-jian-pan/</id>
        <link href="https://geckoc.github.io/post/bi-ji-ben-nei-zhi-jian-pan/">
        </link>
        <updated>2021-01-07T01:21:58.000Z</updated>
        <summary type="html"><![CDATA[<h4 id="1-禁用内置键盘触摸板">1. 禁用内置键盘&amp;触摸板</h4>
]]></summary>
        <content type="html"><![CDATA[<h4 id="1-禁用内置键盘触摸板">1. 禁用内置键盘&amp;触摸板</h4>
<!-- more -->
<p>启动管理员命令行(Win+x)，选择windowsPowershe(管理员)  (命令提示符)</p>
<figure data-type="image" tabindex="1"><img src="https://geckoc.github.io//post-images/1609982577853.png" alt="" loading="lazy"></figure>
<p>在打开的窗口中：输入cmd，并敲击回车</p>
<p>然后输入 sc config i8042prt start= disabled</p>
<p>提示成功后重启电脑即可，开启则是把disabled换成auto</p>
<p>sc config i8042prt start= disabled (关)</p>
<p>sc config i8042prt start= auto(开)</p>
<figure data-type="image" tabindex="2"><img src="https://geckoc.github.io//post-images/1609982602898.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mysql无法启动Plugin FEDERATED is disabled]]></title>
        <id>https://geckoc.github.io/post/mysql-plugin-federated-is-disabled/</id>
        <link href="https://geckoc.github.io/post/mysql-plugin-federated-is-disabled/">
        </link>
        <updated>2021-01-07T01:17:53.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="mysql无法启动plugin-federated-is-disabled完美解决">Mysql无法启动Plugin FEDERATED is disabled完美解决</h2>
]]></summary>
        <content type="html"><![CDATA[<h2 id="mysql无法启动plugin-federated-is-disabled完美解决">Mysql无法启动Plugin FEDERATED is disabled完美解决</h2>
<!-- more -->
<blockquote>
<p>WampServer , MySQL 5.5.8</p>
<p>电脑意外关机后，服务启动失败，自动关闭</p>
<p>查看了mysql.log 错误日志</p>
</blockquote>
<pre><code class="language-clojure">201211  0:52:24 [Note] Plugin 'FEDERATED' is disabled.
InnoDB: The InnoDB memory heap is disabled
InnoDB: Mutexes and rw_locks use Windows interlocked functions
InnoDB: Compressed tables use zlib 1.2.3
201211  0:52:24  InnoDB: Error: unable to create temporary file; errno: 2
201211  0:52:24 [ERROR] Plugin 'InnoDB' init function returned error.
201211  0:52:24 [ERROR] Plugin 'InnoDB' registration as a STORAGE ENGINE failed.
201211  0:52:24 [ERROR] Unknown/unsupported storage engine: InnoDB
201211  0:52:24 [ERROR] Aborting

201211  0:52:24 [Note] wampmysqld: Shutdown complete
</code></pre>
<p>以上</p>
<p>网上找到方法,在My.ini文件中的[mysqld]中增加一行</p>
<p>我的是[wampmysqld]</p>
<p>tmpdir=d:/wamp/tmp</p>
<p>[mysqld]  增加一行，注意是 mysqld</p>
<p>federated</p>
<p>重启服务成功</p>
<pre><code class="language-clojure">201214  8:36:43  InnoDB: Initializing buffer pool, size = 128.0M
201214  8:36:43  InnoDB: Completed initialization of buffer pool
201214  8:36:43  InnoDB: highest supported file format is Barracuda.
201214  8:36:48  InnoDB: 1.1.4 started; log sequence number 1785000
201214  8:36:51 [Note] Event Scheduler: Loaded 0 events
201214  8:36:51 [Note] wampmysqld: ready for connections.
Version: '5.5.8-log'  socket: ''  port: 3306  MySQL Community Server (GPL)
</code></pre>
<p>顺便记下</p>
<p>skip-external-locking</p>
<p>skip-name-resolve</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JQuerySummary]]></title>
        <id>https://geckoc.github.io/post/jquerysummary/</id>
        <link href="https://geckoc.github.io/post/jquerysummary/">
        </link>
        <updated>2021-01-06T13:38:22.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="文本操作">文本操作</h3>
<pre><code class="language-javascript">html()//取得第一个匹配元素的html内容，包含标签内容
html(val)//设置所有匹配元素的html内容，识别标签，能够表现出标签的效果
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h3 id="文本操作">文本操作</h3>
<pre><code class="language-javascript">html()//取得第一个匹配元素的html内容，包含标签内容
html(val)//设置所有匹配元素的html内容，识别标签，能够表现出标签的效果

&lt;!-- more --&gt;

text()// 取得所有匹配元素的内容，只有文本内容，没有标签
text(val)//设置所有匹配元素的内容，不识别标签，将标签作为文本插入进去
示例:
$('.c1').text('&lt;h3&gt;你好,理查德&lt;/h3&gt;');
$('.c1').html('&lt;h3&gt;你好,理查德&lt;/h3&gt;');
</code></pre>
<h3 id="属性操作">属性操作</h3>
<pre><code class="language-javascript">attr(attrName)// 返回第一个匹配元素的属性值
attr(attrName, attrValue)// 为所有匹配元素设置一个属性值
attr({k1: v1, k2:v2})// 为所有匹配元素设置多个属性值
removeAttr(attrName)// 从每一个匹配的元素中删除一个属性

示例:
	设置单个属性
		$('.c1').attr('xx','oo');
	设置多个属性
		$('.c1').attr({'age':'18','sex':'alex'});
	查看属性
		$('.c1').attr('属性名');
    	$('.c1').attr('xx');
    删除属性
    	$('.c1').removeAttr('xx');

prop -- 针对的是checked\selected\disabled..

查看标签是否有checked属性,也就是是否被选中
	    attr $(':checked').attr('checked'); //checked -- undefined
	    prop $(':checked').prop('checked'); //true  -- false
		
		通过设置属性的方式来设置是否选中:
			$(':radio').eq(2).prop('checked',true);  true和false不能加引号
			$(':radio').eq(2).prop('checked',false);

简单总结:
	1.对于标签上有的能看到的属性和自定义属性都用attr
	2.对于返回布尔值的比如checkbox、radio和option的是否被选中或者设置其被选中与取消选中都用prop。
	具有 true 和 false 两个属性的属性，如 checked, selected 或者 disabled 使用prop()，其他的使用 attr()
</code></pre>
<h3 id="文档处理">文档处理</h3>
<pre><code class="language-javascript">添加到指定元素内部的后面
	$(A).append(B)// 把B追加到A
	$(A).appendTo(B)// 把A追加到B
	#添加字符串照样能识别标签
	$('#d1').append('&lt;a href=&quot;http://www.jd.com&quot;&gt;京东&lt;/a&gt;');
添加到指定元素内部的前面
	$(A).prepend(B)// 把B前置到A
	$(A).prependTo(B)// 把A前置到B
	示例
		$('a').prependTo($('div'));

添加到指定元素外部的后面
	$(A).after(B)// 把B放到A的后面
	$(A).insertAfter(B)// 把A放到B的后面

添加到指定元素外部的前面
	$(A).before(B)// 把B放到A的前面
	$(A).insertBefore(B)// 把A放到B的前面
	
移除和清空元素
	remove()// 从DOM中删除所有匹配的元素。
	empty()// 删除匹配的元素集合中所有的子节点，包括文本被全部删除，但是匹配的元素还
	$('div').remove();
	$('div').empty();

替换
	replaceWith()
	replaceAll()
	示例:
		var a = document.createElement('a')
		a.href = 'http://www.baidu.com';
		a.innerText = 'xxx';
		
		$('span').replaceWith(a);
		$(a).replaceAll('span');
		
clone()克隆
	&lt;button class=&quot;btn&quot;&gt;屠龙宝刀,点击就送!&lt;/button&gt;	

    $('.btn').click(function () {
        // var a = $(this).clone(); //克隆标签
        var a = $(this).clone(true);  //连带事件一起克隆
        $(this).after(a);

    })
</code></pre>
<h3 id="常用事件">常用事件</h3>
<pre><code class="language-javascript">&lt;div class=&quot;c1&quot;&gt;&lt;/div&gt;

click(function(){...})
	$('#d1').on('click',function () {
        $(this).css({'background-color':'green'})
    })
hover(function(){...})
	//鼠标悬浮 触发事件
    $('.c1').hover(
        //鼠标放上去
        function () {
            $(this).css({'background-color':'blue'});
        },
        function(){
            $(this).css({'background-color':'black'});
        }
    );


blur(function(){...})
	//失去光标(焦点)时触发事件 使div变色
    $('[type=&quot;text&quot;]').blur(function () {
        $('.c1').css({'background-color':'pink'})
    })
focus(function(){...})  //获取光标时触发事件 使div变色
	$('[type=&quot;text&quot;]').focus(function () {
        $('.c1').css({'background-color':'black'})
    })
                 
change(function(){...}) //内容发生变化，input，select等
	//与内容发改变时触发的事件
    $('select').change(function () {
        $('.c1').toggleClass('cc')
    })


keyup(function(){...})	//键盘抬起触发事件
    $(window).keyup(function (e) {
        console.log(e.keyCode);
    })


keydown(function(){...})	//键盘按键按下事件  参数e/event
	$(window).keydown(function (e) {
        console.log(e.keyCode) //每个键都有一个keycode键 ，通过不同的值触发不同的事件
        if(e.keyCode===37){
            $('.c1').css({'background-color':'green'})
        }else if(e.keyCode===39){
            $('.c1').css({'background-color':'balck'})
        }
        else{
            $('.c1').css({'background-color':'yellow'})
        }
    })


mouseenter(function(){...})	// 鼠标悬浮  等同于hover事件
mouseout(function(){...})
	$('.c1').mouseenter(function () {
        $(this).css({'background-color':'blue'});
    });
    $('.c1').mouseout(function () {
        $(this).css({'background-color':'yellow'});
    });


//鼠标悬浮 只触发一次
    $('.c2').mouseenter(function () {
        console.log('你变了');
    });
//鼠标悬浮  连续触发
    $('.c2').mouseover(function () {
        console.log('你变了');
    })
# mouseover 和 mouseenter的区别是：
# mouseover事件是如果该标签有子标签，
# 那么移动到该标签或者移动到子标签时会连续触发，
# mmouseenter事件不管有没有子标签都只触发一次，表示鼠标进入这个对象
</code></pre>
<h3 id="阻止后续冒泡事件发生">阻止后续（冒泡）事件发生</h3>
<pre><code class="language-javascript">//冒泡的意思就是因为html可以嵌套，如果你给儿子标签绑定了点事件或者没有绑定点击事件，
//父级标签绑定了点击事件，那么你一点击子标签，不管子标签有没有绑定事件，
//都会触发父级标签的点击事件，如果有，会先触发子标签的点击事件，
//然后触发父级标签的点击事件，不管子标签有没有点击事件，都会一级一级的还往上找点击事件

$('#d1').click(function () {
        alert('父级标签')
    })
    $('#d2').click(function (e) {	//这个参数e(只是个形参，写evt或者event名字的也很多)表示当前事件本身，这个事件也是一个对象
        alert('子级标签')
        // return false;	//这个也可以阻止
        e.stopPropagation();//用事件对象的这个方法就能阻止冒泡 （Propagation：传递的意思）
    })
</code></pre>
<h3 id="页面载入">页面载入</h3>
<blockquote>
<p>​	  将js代码写到head标签和写道body标签下面的作用是不同的，写在head标签里面的话，</p>
<p>如果你写了操作某个标签的内容的话，那个标签还没加载出来，先加载了你的js代码，就找不到这个标签，所以不会生效，所以写在body标签最下面是一种解决办法。</p>
<p>还有一种办法就是window.onload=function(){js的代码}，等页面上所有的元素都加载完，在执行这里面的js代码，还记得吗？但是这个window.onload有个缺点；</p>
<p>这个缺点就是这个操作时给window.onload赋值，如果你自己写了两个js文件，每个js文件中都有一个window.onload的话，那么后引入的文件会把前面引入的文件的window.onload里面的js代码全部覆盖掉，那么第一个文件的js代码就失去了效果；</p>
<p>还有一个问题就是，window.onload会等到页面上的文档、图片、视频等所有资源都加载完才执行里面的js代码，导致有些效果的加载比较慢；</p>
<p>所以我们使用下面的写法，不存在覆盖问题，而且只要文档加载完就触发，不需要等着一些图片啊视频啊什么的，加载js效果的速度快。</p>
</blockquote>
<pre><code class="language-javascript">1.jQuery文件要在使用jQuery的代码之前引入
2.js代码最好都放在body标签下面或者里面的最下面

3.window.onload:
	window.onload = function () {
            $('.c1').click(function () {
                $(this).css({'background-color': 'green'});
            })
        }

4.页面载入:
$(function () {
            $('.c1').click(function () {
                $(this).css({'background-color': 'green'});
            })
        })
$(document).ready(function{});


与window.onload的区别:
　　　1.window.onload()函数有覆盖现象，必须等待着图片资源加载完成之后才能调用
　　　2.jQuery的这个入口函数没有函数覆盖现象，文档加载完成之后就可以调用（建议使用此函数）
   
        // 等待整个页面中的内容全部加载完成之后,触发window.onload对应的函数里面的内容
        // window.onload 有覆盖现象,会被后面的window.onload给重新赋值
        // window.onload = function () {
        //     $('.c1').click(function () {
        //         $(this).css({'background-color':'green'});
        //     })
        // }

</code></pre>
<h3 id="each循环">each循环</h3>
<pre><code class="language-javascript">循环标签对象数组
$('li').each(function(k,v){
    console.log(k,v);
});

循环普通数组
var d1 = ['aa','bb','cc'];
$.each(d1,function(k,v){
    console.log(k,v);
})

跳出循环  return false; 类似于break
$('li').each(function(k,v){
    console.log(k,v.innerText);
    if (k === 1){
        return false;
    }

});

跳出本次循环  return; 类似于continue
$('li').each(function(k,v){
    
    if (k === 1){
        return;
    }
    console.log(k,v.innerText);
});

</code></pre>
<h3 id="点击事件和滚动事件的示例代码">点击事件和滚动事件的示例代码</h3>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Title&lt;/title&gt;
    &lt;style&gt;
        .c1{
            background-color: red;
            height: 100px;
            width: 100px;
        }
        .c2{
            background-color: green;
            height: 1000px;
            width: 100px;
        }
        .c3{
            background-color: blue;
            height: 1000px;
            width: 100px;
        }
        .s1{
            position: fixed;
            left:20px;
            bottom: 20px;
            height: 40px;
            width: 80px;
            background-color: purple;
            line-height: 40px;
            text-align: center;

        }
        .s1 a{
            color: white;
            font-size: 14px;
            text-decoration: none;
        }
        .hide{
            display: none;
        }
&lt;!-- more --&gt;



    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;!--&lt;a name=&quot;top&quot;&gt;这里是顶部&lt;/a&gt;--&gt;
&lt;!--&lt;a&gt;这里是顶部&lt;/a&gt;--&gt;
&lt;span&gt;顶部位置&lt;/span&gt;
&lt;div class=&quot;c1&quot;&gt;&lt;/div&gt;

&lt;button class=&quot;change-postion&quot;&gt;走你&lt;/button&gt;

&lt;div class=&quot;c2&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;c3&quot;&gt;&lt;/div&gt;

&lt;span class=&quot;s1 hide&quot;&gt;
    &lt;!--&lt;a href=&quot;#top&quot;&gt;返回顶部&lt;/a&gt;--&gt;
    &lt;span&gt;返回顶部&lt;/span&gt;

&lt;/span&gt;


&lt;script src=&quot;jquery.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
	//点击事件来改变标签位置
    $('.change-postion').click(function () {
        $('.c1').offset({top:200,left:200});
    });
    
	//滚动事件,监听滚动距离来显示或者隐藏标签
    $(window).scroll(function () {
        console.log($(window).scrollTop());
        if ($(window).scrollTop() &gt;=200){
            $('.s1').removeClass('hide');
        }else {
            $('.s1').addClass('hide');
        }
    });
    
	// 回到顶部,scrollTop设置值
    $('.s1').click(function () {
        $(window).scrollTop(0);
    })

&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ajax&JQuery发送请求]]></title>
        <id>https://geckoc.github.io/post/ajaxandjquery-fa-song-qing-qiu/</id>
        <link href="https://geckoc.github.io/post/ajaxandjquery-fa-song-qing-qiu/">
        </link>
        <updated>2021-01-06T12:52:51.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="ajax原生发送请求">Ajax原生发送请求</h3>
<pre><code class="language-javascript">        window.onload = function () {
          var btn1 = document.getElementById(&quot;btn1&quot;);
          btn1.onclick = function () {
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h3 id="ajax原生发送请求">Ajax原生发送请求</h3>
<pre><code class="language-javascript">        window.onload = function () {
          var btn1 = document.getElementById(&quot;btn1&quot;);
          btn1.onclick = function () {
              
&lt;!-- more --&gt;

              // 1.创建用于AJAX方式的一个核心对象
            var xmlHttpRequest = new XMLHttpRequest;
              // alert(xmlHttpRequest);
              // 2.为xmlHttpRequest对象绑定一个固定事件
            /**
             * 事件触发，在一次请求过程中共有5次会被触发
             * 功能是为了接受服务器端传回的数据的。
             */
            xmlHttpRequest.onreadystatechange = function () {
              /**
               * readyState
               *      为0时，表示创建核心对象，初始化之前
               *      为1时，表示创建核心对象后，初始化时
               *      为2时，表示创建核心对象后，发出请求时
               *      为3时，表示服务器端开始响应浏览器
               *      为4时，表示服务器端响应结束
               * @type {number}
               */
              var rState = xmlHttpRequest.readyState;
              if(rState == 4){
                // alert(&quot;事件绑定成功--&gt;&quot;+rState);
                //使用核心对象接受服务器传回的唯一数据
                var responseText = xmlHttpRequest.responseText;
                // alert(responseText);
               document.getElementById(&quot;d1&quot;).innerText = responseText;

              }
            }
              //3.初始化请求  &quot;get&quot;请求方式，&quot;ajaxResponse?name=&quot;+name 请求名称携带参数，默认是异步ajax请求
              var name = document.getElementById(&quot;name&quot;).value;
              xmlHttpRequest.open(&quot;get&quot;,&quot;ajaxResponse?name=&quot;+name);
               //4发出请求
              xmlHttpRequest.send();
          }
        }
</code></pre>
<h3 id="jquery发送ajax请求">jQuery发送Ajax请求</h3>
<pre><code class="language-javascript">$(function () {
    $(&quot;#empno&quot;).blur(function () {
        //获取请求参数
        var empno = $(&quot;#empno&quot;).val();
        var ename = $(&quot;#ename&quot;).val();
        $.ajax({ //在ajax函数中传递一个json数据，json数据中包含所有的参数
            url:&quot;getEmpById&quot;, //请求名称
            data:{&quot;empno&quot;:empno,&quot;ename&quot;:ename},//请求参数
            datatype:&quot;json&quot;,//规定从服务器端传回的数据类型，&quot;json&quot;,&quot;text&quot;
            async:true,//异步请求true,同步请求false,默认异步
            type:&quot;post&quot;,//请求方式，post或get,默认是get
            success:function(data){//函数中需要添加一个参数，这个参数可以自动接收服务器传回的数据
                alert(data);
            }
        });
    })
})
</code></pre>
<h3 id="post-get">$.post()   $.get()</h3>
<h4 id="post-和-get-使用同理">post 和 get 使用同理</h4>
<p>格式：jQuery.post(url, [data], [callback], [type])</p>
<p><strong>url</strong>:发送请求地址。</p>
<p><strong>data</strong>:待发送 Key/value 参数。</p>
<p><strong>callback</strong>:发送成功时回调函数。</p>
<p><strong>type</strong>:返回内容格式，xml, html, script, json, text, _default。</p>
<pre><code class="language-javascript">$.post(&quot;/deleteInfo.do&quot;,{&quot;id&quot;:id}
       function(data){
    		alert(data);
	  },&quot;json&quot;);
</code></pre>
<p>&quot;xml&quot;: 返回 XML 文档，可用 jQuery 处理。</p>
<p>&quot;html&quot;: 返回纯文本 HTML 信息；包含的script标签会在插入dom时执行。</p>
<p>&quot;script&quot;: 返回纯文本 JavaScript 代码。不会自动缓存结果。除非设置了&quot;cache&quot;参数。'''注意：'''在远程请求时(不在同一个域下)，所有POST请求都将转为GET请求。(因为将使用DOM的script标签来加载)</p>
<p>&quot;json&quot;: 返回 JSON 数据 。</p>
<p>&quot;jsonp&quot;: <a href="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/">JSONP</a> 格式。使用 <a href="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/">JSONP</a> 形式调用函数时，如 &quot;myurl?callback=?&quot; jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。</p>
<p>&quot;text&quot;: 返回纯文本字符串</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Checkbox批量删除]]></title>
        <id>https://geckoc.github.io/post/checkbox-pi-liang-shan-chu/</id>
        <link href="https://geckoc.github.io/post/checkbox-pi-liang-shan-chu/">
        </link>
        <updated>2021-01-06T09:46:38.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="checkbox批量删除">Checkbox批量删除</h3>
]]></summary>
        <content type="html"><![CDATA[<h3 id="checkbox批量删除">Checkbox批量删除</h3>
<!-- more -->
<h4 id="页面主要代码">页面主要代码</h4>
<h6 id="根据id从数据库中删除jquery16以上">根据ID从数据库中删除，jQuery1.6以上</h6>
<pre><code class="language-javascript"> &lt;script type=&quot;text/javascript&quot;&gt;
 jQuery(function ($) {
 	// 批量删除
            $(&quot;#delete&quot;).click(function () {
                // 定义一个js数组保存所有用户选择的编号
                var arr = [];
                $(&quot;input[type='checkbox']:checked&quot;).each(function (index, item) {
                    arr.push($(this).val());
                });
                // 为0则没有选中任何checkbox
                if (arr.length == 0){
                    alert(&quot;请先选择要删除的商品...&quot;);
                    return;
                }
                // 将数组转换称字符串
                var result = arr.join(&quot;,&quot;);
                if (!confirm('请问确定删除'+arr.length+'条记录吗?')) return;
                // 当确定删除执行ajax异步请求
                $.get(
                    &quot;/batchDelete.json&quot;,
                     {&quot;id&quot;:result},
                    function (data) {
                        if (data==true){
                            alert(&quot;删除成功&quot;);
                            location.reload(); 
                        }
                    },
                &quot;json&quot;);
            });
 }
 &lt;/script&gt;
&lt;div&gt;
	&lt;input id=&quot;delete&quot; type=&quot;button&quot; value=&quot;批量删除&quot;/&gt;
&lt;/div&gt;
&lt;c:forEach items=&quot;${requestScope.product}&quot; var=&quot;p&quot; varStatus=&quot;step&quot;&gt;
        &lt;tr&gt;
            &lt;td style=&quot;height: 22px&quot; align=&quot;center&quot;&gt;
                &lt;input type=&quot;checkbox&quot; value=&quot;${p.id}&quot; name=&quot;id&quot;&gt;
            &lt;/td&gt;
            &lt;td style=&quot;height: 22px&quot; align=&quot;center&quot;&gt;${step.count}&lt;/td&gt;
            &lt;td style=&quot;height: 22px&quot; align=&quot;left&quot;&gt;${p.name}&lt;/td&gt;
            &lt;td style=&quot;height: 22px&quot; align=&quot;center&quot;&gt;${p.price}&lt;/td&gt;
            &lt;td style=&quot;height: 22px&quot; align=&quot;center&quot;&gt;${p.typename}&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/c:forEach&gt;
</code></pre>
<h4 id="servlet主要代码">servlet主要代码</h4>
<p>使用jackson2.11</p>
<pre><code class="language-java">        response.setContentType(&quot;application/json;charset=UTF-8&quot;);
        PrintWriter out = response.getWriter();
        String id = request.getParameter(&quot;id&quot;);
        System.out.println(id);
        System.out.println(&quot;---------------&quot;);
       
        ObjectMapper mapper = new ObjectMapper();
        ProductService service = new ProductServiceImpl();
        /* 
        	由于数据库id类型是int 实体类数据类型为Integer
        	将字符串以,分割,循环传参
        	 若id为String类型，则无需分割循环
        */
        String[] split = id.split(&quot;,&quot;);
        boolean success = false;
        for (String s : split) {
            success = service.batchDelete(Integer.valueOf(s));
        }
         // 将响应结果转换为JSON格式字符串返回
        String jsonValue = mapper.writeValueAsString(success);
        System.out.println(&quot;批量删除成功 BatchDelete.....&quot;);
        out.write(jsonValue);
</code></pre>
<h4 id="单元测试">单元测试</h4>
<pre><code class="language-java">@Test
    public void doGet() {
        String str = &quot;1,2,3&quot;;
        String[] split = str.split(&quot;,&quot;);
        for (String s : split) {
            System.out.println(s);
            Integer value = Integer.valueOf(s);
            System.out.println(&quot;trans&quot; + value);
        }
    }
</code></pre>
<h4 id="dao持久层主要代码">Dao持久层主要代码</h4>
<pre><code class="language-java">	
    public boolean batchDelete(Integer id) {
        String sql = &quot;delete from product where id in (?)&quot;;
      // 若形参为String 则可直接写入
      //  String sql = &quot;delete from product where id in (+&quot;id&quot;+)&quot;;
      
        try {
            int delete = runner.update(conn, sql, id);
       //      int delete = runner.update(conn, sql); ID为String时 
            // 删除成功则大于0，直接返回
            return delete &gt; 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jQuery对Checkbox的各种操作]]></title>
        <id>https://geckoc.github.io/post/jquery-cao-zuo/</id>
        <link href="https://geckoc.github.io/post/jquery-cao-zuo/">
        </link>
        <updated>2021-01-06T09:18:57.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="jquery对checkbox的各种操作">jQuery对Checkbox的各种操作</h3>
]]></summary>
        <content type="html"><![CDATA[<h3 id="jquery对checkbox的各种操作">jQuery对Checkbox的各种操作</h3>
<!-- more -->
<pre><code>    //注意： 操作checkbox的checked,disabled属性时jquery1.6以前版本用attr,1.6以上（包含）建议用prop
    //1、根据id获取checkbox
    $(&quot;#cbCheckbox1&quot;);
    
    //2、获取所有的checkbox
    $(&quot;input[type='checkbox']&quot;);//or
    $(&quot;input[name='cb']&quot;);
    
    //3、获取所有选中的checkbox
    $(&quot;input:checkbox:checked&quot;);//or
    $(&quot;input:[type='checkbox']:checked&quot;);//or
    $(&quot;input[type='checkbox']:checked&quot;);//or
    $(&quot;input:[name='ck']:checked&quot;);
    
    //4、获取checkbox值
    //用.val()即可，比如：
    $(&quot;#cbCheckbox1&quot;).val();
    //5、获取多个选中的checkbox值
    // 创建数组将值放入数组中 push()方法 
    var vals = [];
    $('input:checkbox:checked').each(function (index, item) {
        vals.push($(this).val());
    });
    
    //6、判断checkbox是否选中（jquery 1.6以前版本 用  $(this).attr(&quot;checked&quot;)）
    $(&quot;#cbCheckbox1&quot;).click(function () {
        if ($(this).prop(&quot;checked&quot;)) {
            alert(&quot;选中&quot;);
        } else {
            alert(&quot;没有选中&quot;);
        }
    });
    
    //7、设置checkbox为选中状态
    $('input:checkbox').attr(&quot;checked&quot;, 'checked');//or
    $('input:checkbox').attr(&quot;checked&quot;, true);
    
    //8、设置checkbox为不选中状态
    $('input:checkbox').attr(&quot;checked&quot;, '');//or
    $('input:checkbox').attr(&quot;checked&quot;, false);
    
    //9、设置checkbox为禁用状态(jquery&lt;1.6用attr,jquery&gt;=1.6建议用prop)
    $(&quot;input[type='checkbox']&quot;).attr(&quot;disabled&quot;, &quot;disabled&quot;);//or
    $(&quot;input[type='checkbox']&quot;).attr(&quot;disabled&quot;, true);//or
    $(&quot;input[type='checkbox']&quot;).prop(&quot;disabled&quot;, true);//or
    $(&quot;input[type='checkbox']&quot;).prop(&quot;disabled&quot;, &quot;disabled&quot;);
    
    //10、设置checkbox为启用状态(jquery&lt;1.6用attr,jquery&gt;=1.6建议用prop)
    $(&quot;input[type='checkbox']&quot;).removeAttr(&quot;disabled&quot;);//or
    $(&quot;input[type='checkbox']&quot;).attr(&quot;disabled&quot;, false);//or
    $(&quot;input[type='checkbox']&quot;).prop(&quot;disabled&quot;, &quot;&quot;);//or
    $(&quot;input[type='checkbox']&quot;).prop(&quot;disabled&quot;, false);

</code></pre>
<h4 id="示例如下">示例如下</h4>
<pre><code>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
    &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h3&gt;jQuery操作checkbox
    &lt;/h3&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;cbCheckbox1&quot; value=&quot;1&quot; /&gt;
    &lt;input type=&quot;checkbox&quot; value=&quot;2&quot; /&gt;
    &lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; value=&quot;3&quot; /&gt;
    &lt;input type=&quot;checkbox&quot; value=&quot;4&quot; /&gt;
    &lt;input type=&quot;checkbox&quot; disabled=&quot;true&quot; value=&quot;5&quot; /&gt;
    &lt;br /&gt;
    &lt;input type=&quot;button&quot; id=&quot;btnDisabled&quot; value=&quot;禁用&quot; onclick=&quot;fn_disabled();&quot; /&gt;
    &lt;input type=&quot;button&quot; id=&quot;Button1&quot; value=&quot;启用&quot; onclick=&quot;fn_enable();&quot; /&gt;&lt;br /&gt;
    &lt;input type=&quot;button&quot; id=&quot;Button2&quot; value=&quot;获取选中的值&quot; onclick=&quot;getCheckedValues();&quot; /&gt;&lt;br /&gt;
    &lt;input type=&quot;button&quot; id=&quot;Button3&quot; value=&quot;选中第二个&quot; onclick=&quot;checkedSecond();&quot; /&gt;
    &lt;input type=&quot;button&quot; id=&quot;Button4&quot; value=&quot;取消选中第二个&quot; onclick=&quot;uncheckedSecond();&quot; /&gt;&lt;br /&gt;
&lt;/body&gt;
&lt;/html&gt;
&lt;script src=&quot;js/jquery-1.9.1.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;

    function fn_disabled() {
        //$(&quot;input[type='checkbox']&quot;).attr(&quot;disabled&quot;, &quot;disabled&quot;);
        //$(&quot;input[type='checkbox']&quot;).attr(&quot;disabled&quot;, true);
        $(&quot;input[type='checkbox']&quot;).prop(&quot;disabled&quot;, true);
        //  $(&quot;input[type='checkbox']&quot;).prop(&quot;disabled&quot;, &quot;disabled&quot;);
    }

    function fn_enable() {
        //  $(&quot;input[type='checkbox']&quot;).removeAttr(&quot;disabled&quot;);
        // $(&quot;input[type='checkbox']&quot;).attr(&quot;disabled&quot;, false);
        // $(&quot;input[type='checkbox']&quot;).prop(&quot;disabled&quot;,&quot;&quot;);
        $(&quot;input[type='checkbox']&quot;).prop(&quot;disabled&quot;, false);
    }

    //获取选中的 checkbox的值
    function getCheckedValues() {
        var arr = [];
        $(&quot;input[type='checkbox']:checked&quot;).each(function (index, item) {//
            arr.push($(this).val());
        });
        alert(arr);
    }

    function checkedSecond() {
        // $(&quot;input[type='checkbox']:eq(1)&quot;).prop(&quot;checked&quot;, &quot;checked&quot;);
        $(&quot;input[type='checkbox']:eq(1)&quot;).prop(&quot;checked&quot;, true);
    }

    function uncheckedSecond() {
        //  $(&quot;input[type='checkbox']:eq(1)&quot;).prop(&quot;checked&quot;, &quot;&quot;);
        $(&quot;input[type='checkbox']:eq(1)&quot;).prop(&quot;checked&quot;, false);
    }

    $(&quot;#cbCheckbox1&quot;).click(function () {
        if ($(this).prop(&quot;checked&quot;)) {//jquery 1.6以前版本 用  $(this).attr(&quot;checked&quot;)
            alert(&quot;选中&quot;);
        } else {
            alert(&quot;没有选中&quot;);
        }
    });

&lt;/script&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[各种页面刷新]]></title>
        <id>https://geckoc.github.io/post/ge-chong-ye-mian-shua-xin/</id>
        <link href="https://geckoc.github.io/post/ge-chong-ye-mian-shua-xin/">
        </link>
        <updated>2021-01-06T09:16:39.000Z</updated>
        <summary type="html"><![CDATA[<pre><code>		top.location.reload();//刷新顶级页面
		parent.location.reload();//刷新父级页面
		window.parent.location.reload();//刷新父级页面
		window.location.reload();//刷新当前页面
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<pre><code>		top.location.reload();//刷新顶级页面
		parent.location.reload();//刷新父级页面
		window.parent.location.reload();//刷新父级页面
		window.location.reload();//刷新当前页面
</code></pre>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[字符串&数组练习]]></title>
        <id>https://geckoc.github.io/post/zi-fu-chuan-andshu-zu-lian-xi/</id>
        <link href="https://geckoc.github.io/post/zi-fu-chuan-andshu-zu-lian-xi/">
        </link>
        <updated>2020-11-21T04:25:49.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="stringarray">String&amp;Array</h2>
<ul>
<li>练习</li>
<li>关于String类的方法和Array的操作</li>
<li>字符串分割，数组排序，字符串赋值给自定义对象并添加到数组中</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<h2 id="stringarray">String&amp;Array</h2>
<ul>
<li>练习</li>
<li>关于String类的方法和Array的操作</li>
<li>字符串分割，数组排序，字符串赋值给自定义对象并添加到数组中</li>
</ul>
<!-- more -->
<h5 id="题目">题目：</h5>
<ol>
<li>
<p>从键盘上输入身份证号, 判断出生日期,性别，<br>
身份证倒数第二位表示性别，双数为女性，单为男</p>
</li>
<li>
<p>有字符串: ”101,lisi,98;</p>
<p>202,wangwu,76;</p>
<p>303,chenqi,84;</p>
<p>404,zhangsan,49;</p>
<p>505,xiaoming,67”,</p>
<p>保存的学生的学号,姓名,成绩信息.</p>
<p>要求把字符串中学生信息取出来,创建Student对象,</p>
<p>把Student对象保存到数组中;遍历学生对象数组;</p>
<p>在数组中查找名字为xiaoxiao同学是否存在.对数组中学生对象根据成绩降序排序</p>
</li>
</ol>
<hr>
<pre><code>import java.util.Scanner;

/**
 * @ClassName Judge
 * @Deacription TODO 1. 从键盘上输入身份证号, 判断出生日期,性别
 *                   2. 身份证倒数第二位表示性别，双数为女性，单为男
 * @Version 1.0
 */
public class Judge {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        boolean verify = true;
        while (verify){
            System.out.print(&quot;请输入你的身份证号码:&quot;);
            String id = sc.next();
            // 用正则表达验证控制台输入
            boolean control = id.matches(&quot;\\d{17}(\\d|X|x)&quot;);
            if (control){
                // 截取身份证中出生日期
                String birth = id.substring(6, 14);
                // 取出倒数第二位的元素，偶数为女性
                char c = id.charAt(id.length() - 2);
                if (c % 2 == 0){
                    System.out.println(&quot;女性\t&quot; + &quot;出生日期：&quot; + birth);
                    // 判断成功结束
                    verify = false;
                }else {
                    System.out.println(&quot;男性\t&quot; + &quot;出生日期：&quot; + birth);
                    verify = false;
                }
            }else{
                //不合法继续循环
                System.out.println(&quot;身份证输入不合法...请重新输入！&quot;);
            }
        }
    }
}
</code></pre>
<h5 id="student类">Student类</h5>
<pre><code>public class Student implements Comparable&lt;Student&gt;{
    private String id;
    private String name;
    private String score;

    public Student(String id, String name, String score) {
        this.id = id;
        this.name = name;
        this.score = score;
    }
    public Student() {
    }

    public String getId() {
        return id;
    }

    public Student setId(String id) {
        this.id = id;
        return this;
    }

    public String getName() {
        return name;
    }

    public Student setName(String name) {
        this.name = name;
        return this;
    }

    public String getScore() {
        return score;
    }

    public Student setScore(String score) {
        this.score = score;
        return this;
    }

    @Override
    public String toString() {
        return &quot;Student{&quot; +
                &quot;id='&quot; + id + '\'' +
                &quot;, name='&quot; + name + '\'' +
                &quot;, score='&quot; + score + '\'' +
                '}';
    }

    @Override
    public int compareTo(Student o) {
        return o.getScore().compareTo(this.getScore());
    }
}
</code></pre>
<h5 id="测试类">测试类</h5>
<pre><code>/**
 * @ClassName StudentTest
 * @Deacription
 *  TODO
 *     有字符串: ”101,lisi,98;
 *              202,wangwu,76;
 *              303,chenqi,84;
 *              404,zhangsan,49;
 *              505,xiaoming,67”,
 *      保存的学生的学号,姓名,成绩信息.
 *      要求把字符串中学生信息取出来,创建Student对象,
 *      把Student对象保存到数组中;遍历学生对象数组;
 *      在数组中查找名字为xiaoxiao同学是否存在.对数组中学生对象根据成绩降序排序
 * @Version 1.0
 */
public class StudentTest {
    public static void main(String[] args) {
        String src = &quot;101,lisi,98;202,wangwu,76;303,chenqi,84;404,zhangsan,49;505,xiaoming,67&quot;;
        // 分号替换成逗号
        String replace = src.replace(&quot;;&quot;, &quot;,&quot;);
        // 通过逗号分隔字符串
        String[] split = replace.split(&quot;,&quot;);
        for (String s : split) {
            System.out.print(s + &quot; &quot;);
        }
        //创建学生数组
        Student[] stus = new Student[5];
        // 思路，内循环，分隔字符串后并按照每3个字符分别赋值给不同的对象
        /*
        for (int i = 0; i &lt; stus.length ; i++) {
            // 创建五个学生对象，内循环控制赋值
            Student student = new Student();
            for (int j = 0; j &lt; split.length ; j++) {
                String id = split[j];
                String name = split[j+1];
                String score = split[j+2];
                student = new Student(); //这是重新new对象.
                stus[i] = student;
            }
        }
        */
        // 此步骤暂时没有想到解决方法，只能手动通过数组下标赋值.....
        /*
        Student stu1 = new Student(split[0],split[1],split[2]);
        Student stu2 = new Student(split[3],split[4],split[5]);
        Student stu3 = new Student(split[6],split[7],split[8]);
        Student stu4 = new Student(split[9],split[10],split[11]);
        Student stu5 = new Student(split[12],split[13],split[14]);
        */
        // ！！！内循环会破坏创建对象结构，
        // 会有NullPointException或ArrayIndexOutOfBoundsException
        // split[i]元素下标为持续+1，定义初始值，循环自增
        int index = 0;
        for (int i = 0; i &lt; stus.length ; i++) {
                String id = split[index++];
                String name = split[index++];
                String score = split[index++];
                Student student = new Student(id,name,score);
                stus[i] = student;
        }
        System.out.println();
        // 遍历学生对象，未排序
        for (Student student : stus) {
            System.out.println(student);
        }
//        // 学生对象放入数组中
//        Student[] stus = {stu1,stu2,stu3,stu4,stu5};
//        对自定义类型进行排序需要实现Comparable并实现CompareTo方法重写规则
//        否则报错Exception in thread &quot;main&quot; java.lang.ClassCastException
        Arrays.sort(stus); // sort默认升序，已在Student类重新编写排序规则
        //判断学生是否存在
        if (isExist1(stus,&quot;xiaoxiao&quot;)){
            System.out.println(&quot;学生存在&quot;);
        }else{
            System.out.println(&quot;不存在&quot;);
        }
        // 按照成绩降序输出
        System.out.println(&quot;按照学生成绩降序输出&quot;);
        for (Student student : stus) {
            System.out.println(student);
        }
    }

    public static boolean isExist1(Student[] stus ,String target){
        for (int i = 0; i &lt; stus.length; i++) {
            if (target.equals(stus[i].getName())){
                return true;
            }
        }
        return false;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TreeSet]]></title>
        <id>https://geckoc.github.io/post/treeset/</id>
        <link href="https://geckoc.github.io/post/treeset/">
        </link>
        <updated>2020-11-21T03:13:13.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="treeset">TreeSet</h2>
<h3 id="概念">概念</h3>
<blockquote>
<ul>
<li>
<ol>
<li>treeSet 被称为可排序集合</li>
</ol>
</li>
<li>
<ol start="2">
<li>无序不可重复，可以自动排序，没有下标</li>
</ol>
</li>
</ul>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h2 id="treeset">TreeSet</h2>
<h3 id="概念">概念</h3>
<blockquote>
<ul>
<li>
<ol>
<li>treeSet 被称为可排序集合</li>
</ol>
</li>
<li>
<ol start="2">
<li>无序不可重复，可以自动排序，没有下标</li>
</ol>
</li>
</ul>
</blockquote>
<!-- more -->
<blockquote>
<ul>
<li>
<ol start="3">
<li>底层是TreeMap数据结构，TreeMap底层是二叉树</li>
</ol>
</li>
<li>
<ol start="4">
<li>放到TreeSet集合中的元素，等于放到TreeMap集合中的key部分</li>
</ol>
</li>
</ul>
</blockquote>
<pre><code>/**
 *      注意：TreeSet可以自动排序自定义类型吗？
 *       不可以，会出现类型转换异常 ClassCaseException
 *       实现自定义类排序，需实现Comparable接口并且编写排序规则
 */
public class TreeSetTest {
    public static void main(String[] args) {
        User user1 = new User(87);
        User user2 = new User(35);
        User user3 = new User(65);
        Set&lt;User&gt; set = new TreeSet&lt;&gt;();
//       User类未实现Comparable接口，并编写排序规则，出现ClassCaseException异常
        try {
            set.add(user1);
            set.add(user2);
            set.add(user3);
        } catch (ClassCastException e) {
            e.printStackTrace();
        }
        for (User user : set) {
            System.out.println(user);
        }
    }
}
// 为了方便，User类就不贴不出来了，封装一个int类型属性即可，较好比较
</code></pre>
<ul>
<li>自定义类型排序要实现<em>Comparable</em>接口,并且实现**compareTo()**方法</li>
</ul>
<pre><code>// 实现Comparable接口,并且实现compareTo()方法
public class SomeOne implements Comparable&lt;SomeOne&gt;{
    private String name;
    private int age;

    public SomeOne() {
    }

    public SomeOne(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public SomeOne setName(String name) {
        this.name = name;
        return this;
    }

    public int getAge() {
        return age;
    }

    public SomeOne setAge(int age) {
        this.age = age;
        return this;
    }

    @Override
    public String toString() {
        return &quot;SomeOne{&quot; +
                &quot;name='&quot; + name + '\'' +
                &quot;, age=&quot; + age +
                '}';
    }
    /*
     *     重写排序比较逻辑    k.compareTo(t.key)
     *     拿集合中的key值和另外的key比较，返回值可能是：&lt; 0, &gt;0, =0
     *  CompareTo返回值很重要
     *         返回0表示相同，value会覆盖
     *     返回&gt;0，会在右子树上继续找
     *         返回&lt;0，会在左子树上继续找
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */

    @Override
    public int compareTo(SomeOne o) {
        /*if (this.age == o.age) {
         return 0;
      }else if (this.age &gt; o.age) {
         return 1;
      }else if (this.age &lt; o.age) {
         return -1;
      } */
        int num = this.age - o.age;  // 此代码可表示上述意思
        /*
        如果年龄相同，则按姓名排序，
        String类型已实现CompareTo()方法，可直接调用
         */
        return num == 0 ? this.name.compareTo(o.name):num;
    }
}
</code></pre>
<h6 id="测试类">测试类</h6>
<pre><code>public class TreeSetTest {
    public static void main(String[] args) {
//      若年龄相同，则按姓名排序，字母大小
        SomeOne someOne1 = new SomeOne(&quot;A&quot;,99);
        SomeOne someOne2 = new SomeOne(&quot;F&quot;,88);
        SomeOne someOne3 = new SomeOne(&quot;D&quot;,88);
        SomeOne someOne4 = new SomeOne(&quot;C&quot;,88);
        SomeOne someOne5 = new SomeOne(&quot;Z&quot;,66);
        Set&lt;SomeOne&gt; tree = new TreeSet&lt;&gt;();
        tree.add(someOne1);
        tree.add(someOne2);
        tree.add(someOne3);
        tree.add(someOne4);
        tree.add(someOne5);
//        Iterator&lt;SomeOne&gt; iterator = someOnes.iterator();
        for (SomeOne someOne : tree) {
            System.out.println(someOne);
        }
    }
}
</code></pre>
<ul>
<li><strong>TreeSet</strong>集合中实现元素可排序的方法有两种</li>
<li>
<ol>
<li>实现<em>java.lang.Comparable</em>接口，并且实现**CompareTo()**方法</li>
</ol>
</li>
<li>
<ol start="2">
<li>通过构造方法传递比较器对象，自定义编写实现***java.util.Comparator***接口</li>
</ol>
</li>
<li><strong>Comparable</strong> 和 <strong>Comparator</strong> 如何选择？
<ul>
<li>
<pre><code> 比较规则多个，需要频繁切换，建议使用 **Comparator**
</code></pre>
</li>
<li>
<pre><code> 比较规则无需改变，建议使用 **Comparable**
</code></pre>
</li>
</ul>
</li>
<li><strong>Comparator</strong> 符合<strong>OCP</strong>原则  <em>(open close principle)</em></li>
</ul>
<h5 id="自定义编写实现comparator接口">自定义编写实现Comparator接口</h5>
<pre><code>public class ComparatorImpl implements Comparator&lt;Human&gt; {
    @Override
    public int compare(Human o1, Human o2) {
        int num =o1.getAge() - o2.getAge();
        // 年龄相同时，比较姓名
        return num == 0 ? o1.getName().compareTo(o2.getName()):num;
    }
}
</code></pre>
<p>自定义模板类</p>
<pre><code>public class Human {
    private String name;
    private int age;

    public Human() {
    }

    public Human(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public Human setName(String name) {
        this.name = name;
        return this;
    }

    public int getAge() {
        return age;
    }

    public Human setAge(int age) {
        this.age = age;
        return this;
    }

    @Override
    public String toString() {
        return &quot;Human{&quot; +
                &quot;name='&quot; + name + '\'' +
                &quot;, age=&quot; + age +
                '}';
    }
}
</code></pre>
<h6 id="测试类-2">测试类</h6>
<pre><code>public class TreeSetTest04 {
    public static void main(String[] args) {
//       通过构造方法传递比较器
//        Set&lt;Human&gt; humans = new TreeSet&lt;&gt;(new ComparatorImpl());
//       也可直接通过匿名内部类实现
        Set&lt;Human&gt; humans = new TreeSet&lt;&gt;(new Comparator&lt;Human&gt;() {
            @Override
            public int compare(Human o1, Human o2) {
                int num = o1.getAge() - o2.getAge();
                return num == 0 ? o1.getName().compareTo(o2.getName()):num;
            }
        });
        humans.add(new Human(&quot;Richard&quot;,24));
        humans.add(new Human(&quot;Jordan&quot;,80));
        humans.add(new Human(&quot;James&quot;,65));
        humans.add(new Human(&quot;Kobe&quot;,88));
        humans.add(new Human(&quot;Crazy&quot;,24));
        humans.add(new Human(&quot;Alex&quot;,24));
        humans.add(new Human(&quot;Richard&quot;,99));
        for (Human human : humans) {
            System.out.println(human);
        }
    }
}
</code></pre>
<h5 id="tips">Tips</h5>
<pre><code>        /*对于自定义类型，集合工具类无法直接调用排序
        Collections.sort(bodyList);  错误
        reason: no instance(s) of type variable(s) T
        exist so that Body conforms to Comparable&lt;? super T&gt;
        需实现Comparable接口
        */
       Set&lt;Integer&gt; hash = new HashSet&lt;&gt;();
        hash.add(5);
        hash.add(4);
        hash.add(3);
        hash.add(2);
        hash.add(1);
        System.out.println(&quot;\n****hashSet****&quot;);
        /*
        Collections.sort(hash);  错误
        reason: no instance(s) of type variable(s) T
        exist so that Set&lt;Integer&gt; conforms to List&lt;T
        Set集合如何排序，Collections.Sort只能传递List类型，可转换再排序
         */
        List&lt;Integer&gt; exList = new ArrayList&lt;Integer&gt;(hash);
        Collections.sort(exList);
        for (Integer integer : exList) {
            System.out.print(integer + &quot;**&gt;&quot;);
        }
		/*
		 java.util.Arrays的数组工具类排序也是无法直接排序自定义类型
		 对自定义类型进行排序需要实现Comparable并实现CompareTo方法重写规则
	      否则报错Exception in thread &quot;main&quot; java.lang.ClassCastException
		*/
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Thread 线程]]></title>
        <id>https://geckoc.github.io/post/thread-xian-cheng/</id>
        <link href="https://geckoc.github.io/post/thread-xian-cheng/">
        </link>
        <updated>2020-11-11T08:40:40.000Z</updated>
        <summary type="html"><![CDATA[<ul>
<li>创建线程的方式
<ul>
<li>第一种：编写类，直接继承 <em>java.lang.Thread</em>  重写<em>run()</em></li>
<li>第二种：实现<em>Runnable</em>接口重写<em>run()</em></li>
</ul>
</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<ul>
<li>创建线程的方式
<ul>
<li>第一种：编写类，直接继承 <em>java.lang.Thread</em>  重写<em>run()</em></li>
<li>第二种：实现<em>Runnable</em>接口重写<em>run()</em></li>
</ul>
</li>
</ul>
<!-- more -->
<ul>
<li>第二种方法用的较多，实现接口后仍可继承其他类，比较灵活</li>
</ul>
<pre><code>public class ThreadTest01 {
   public static void main(String[] args) {
      MyThread myThread = new MyThread();
      /*
       *      run()不会启动线程，未分配新的分支栈，不能并发(单线程)
       *      start()方法：启动一个分支线程，在JVM中开辟一个新的栈空间
       *      开辟新空间后，start()方法就结束了，线程即启动成功
       *      线程会自动调用run()，且run()在分支栈的栈底（压栈）
       *     run和main是平级的，均在栈的底部
       */
//    myThread.run(); 
      myThread.start();
      
      System.out.println(&quot;Thread Running...&quot;);
      for (int i = 100; i &gt; 0; i--) {
         System.out.println(&quot;doing: &quot; + i);
      }
   }
}

class MyThread extends Thread{
   @Override
   public void run() {
      for (int i = 0; i &lt; 100; i++) {
         System.out.println(&quot;ThreadRunning...&quot;+i);
      }
   }
}
</code></pre>
<hr>
<pre><code>/*
 *     启动线程的第二种方法 
 */
public class ThreadTest02 {
   public static void main(String[] args) {
      //创建线程把可运行对象放入参数中
      Thread t = new Thread(new MyRunnable());
      t.start(); //开辟空间 自动调用run()
      for (int i = 0; i &lt; 666; i++) {
         System.out.println(&quot;Main Thread--&gt;&quot; + i);
      }
      
//    可直接实现Runnable接口，匿名内部类
      Thread t2 = new Thread(new Runnable() {
         public void run() {
            System.out.println(&quot;Anonymous---&gt;&quot;);
         }
      });
      t2.start();
   }
}

// 不是线程，是可运行的类
class MyRunnable implements Runnable{
   @Override
   public void run() {
      for (int i = 0; i &lt; 666; i++) {
         System.out.println(&quot;---Thread---&gt;&quot; + i);
      }
   }
}
</code></pre>
<ul>
<li>获取线程当前对象</li>
<li>Thread t = Thread.currentThread()</li>
<li>关于线程的sleep()方法</li>
<li>static void sleep(long millis)</li>
<li>静态方法，参数是毫秒</li>
<li>作用：让当前线程进入休眠，进入“阻塞状态”，放弃占有CPU时间片（执行权），让其他线程使用</li>
<li>此段代码出现在A线程中，A线程会进入休眠</li>
<li>此段代码出现在B线程中，B线程会进入休眠</li>
<li>Thread.sleep() 间隔特定时间，去执行一段特定代码，每隔一段时间执行一次</li>
</ul>
<pre><code>public class ThreadTest01 {
   public static void main(String[] args) {
      MyThread thread = new MyThread();
      String name = Thread.currentThread().getName();
      System.out.println(name);
      thread.start();
   }
}

class MyThread extends Thread {
   @Override
   public void run() {
      for (int i = 0; i &lt; 10; i++) {
         String name = Thread.currentThread().getName();
         System.out.println(name +&quot;---&gt;&quot; + i);
         // 睡眠1秒
         try {
            sleep(1000);
         } catch (InterruptedException e) {
            e.printStackTrace();
         }
      }
   }
}
</code></pre>
<ul>
<li>关于终止线程的睡眠，如何唤醒正在睡眠的线程？</li>
<li>t.interrupt(); ----&gt; 注：非结束线程的执行，是中断线程的睡眠</li>
<li>关于终止线程的执行</li>
<li>t.stop();  //强行终止线程，已过时不建议使用</li>
</ul>
<pre><code>public class ThreadTest02 {
	public static void main(String[] args) {
		Runnable flag = new OverThread();
		Thread t = new Thread(flag);
		t.setName(&quot;Branch Thread&quot;);
		t.start();
		try {
			Thread.sleep(1000*3);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
//		这种方式（依靠了java的异常处理机制）
		t.interrupt(); //中断T线程的睡眠
//		t.stop();  //强行终止线程，已过时不建议使用
	}
}

class OverThread implements Runnable {
	
	@Override
	public void run() {
	    System.out.println(Thread.currentThread().getName() + &quot;---&gt;&quot; + &quot;begin&quot;);
//		为什么只能捕捉异常而不能抛出，因子类不能抛出比父类更宽泛的异常
		try {
			Thread.sleep(1000 * 60 * 60 * 24 * 365); //睡眠一年
		} catch (InterruptedException e) {
				e.printStackTrace();
		}
		System.out.println(Thread.currentThread().getName() + &quot;---&gt;&quot; + &quot;end&quot;);
	}
}
</code></pre>
<hr>
<pre><code>/*
 *     合适终止线程的方式。添加Boolean标记
 */
public class ThreadTest03 {
   public static void main(String[] args) {
      stopThread flag = new stopThread();
      Thread t = new Thread(flag);
      t.setName(&quot;BranchThread&quot;);
      t.start();
      try {
         Thread.sleep(1000*3);
      } catch (InterruptedException e) {
         e.printStackTrace();
      }
//    什么时候想要终止线程，只要把标记改为false即可
//    以上代码，表示main线程休眠3秒，后flag.run执行，终止线程
      flag.run = false;
   }
}

class stopThread implements Runnable{
// 添加布尔标记
   boolean run = true;
   @Override
   public void run() {
      for (int i = 0; i &lt; 100; i++) {
         if (run) {
            System.out.println(Thread.currentThread().getName() + &quot;---&gt;&quot; + i);
            try {
               Thread.sleep(1000);
            } catch (InterruptedException e) {
               e.printStackTrace();
            }
         }else {
//          线程结束前可以执行save，保存数据
            return;
         }
      }
   }
}
</code></pre>
<hr>
<pre><code>/*
 *     线程让位
 */
public class ThreadYield {
   public static void main(String[] args) {
      
      Thread t = new yieldThread();
      t.start();
      
      for (int i = 0; i &lt; 2000; i++) {
         System.out.println(Thread.currentThread().getName() + i);
      }
   }
}

class yieldThread extends Thread{
   @Override
   public void run() {
      for (int i = 0; i &lt; 2000; i++) {
//       每10个让位一次
         if (i % 10 == 0) {
            yield(); //当前线程暂停一下，让其其他线程
         }
         System.out.println(&quot;Branch--&quot;+i);
      }
   }
}
</code></pre>
<hr>
<ul>
<li>面试题</li>
</ul>
<pre><code>public class ThreadInterView {
   public static void main(String[] args) {
      Thread t = new MyThread1();
      t.setName(&quot;X&quot;);
      t.start();
      try {
//       问题：这段代码会让线程t进入休眠状态吗？
         t.sleep(1000*3);
         /*
          *     不会！在执行时仍会转换为Thread.sleep(1000*3);
          *     这段代码的作用是让当前线程进入休眠状态，即是main线程进入休眠
          *     这段代码出现在main方法中，main线程休眠
          */
      } catch (InterruptedException e) {
         e.printStackTrace();
      }
      System.out.println(&quot;Down...&quot;);
   }
}

class MyThread1 extends Thread{
   @Override
   public void run() {
      for (int i = 0; i &lt; 20; i++) {
  		System.out.println(Thread.currentThread().getName()+&quot;---&gt;&quot;+ i);
      }
   }
}
</code></pre>
<h4 id="loading"><em><strong>loading...</strong></em></h4>
]]></content>
    </entry>
</feed>